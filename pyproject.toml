[project]
name = "foiakit-similar"
version = "0.01"
description = ""
authors = [
    {name = "Phyo", email = "phyoakl@hexcode.tech"},
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "Business"}
dependencies = [
    "awscli-local>=0.21",
    "en-core-web-md @ https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.7.1/en_core_web_md-3.7.1-py3-none-any.whl",
    "alembic==1.11.1",
    "anyio==3.7.0",
    "aws-psycopg2==1.3.8",
    "boto3==1.28.3",
    "botocore==1.31.3",
    "exceptiongroup==1.1.1",
    "litestar",
    "h11==0.14.0",
    "idna==3.4",
    "jmespath==1.0.1",
    "Mako==1.2.4",
    "mangum==0.17.0",
    "MarkupSafe==2.1.3",
    "pydantic==1.10.9",
    "python-dateutil==2.8.2",
    "python-multipart==0.0.6",
    "s3transfer==0.6.1",
    "six==1.16.0",
    "sniffio==1.3.0",
    "SQLAlchemy==2.0.22",
    "typing-extensions==4.6.3",
    "urllib3==1.26.16",
    "uvicorn==0.22.0",
    "ipykernel>=6.26.0",
    "farm-haystack[inference]>=1.21.2",
    "rich>=13.6.0",
    "spacy>=3.7.2",
    "pip>=23.3.1",
    "langdetect>=1.0.9",
]

[project.urls]
Slack = "https://app.slack.com/client/T085AMNRM/C051Q4FU6AU"
Homepage = "https://dev.foiakit.com/"
Issue = "https://skywarditsolutions.atlassian.net/jira/software/c/projects/FOIAK/boards"
Source = "https://github.com/IT-skyward/foiakit-infra"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.hatch.metadata]
allow-direct-references = true



linting = [
  "pre-commit>=3.4.0",
  "black>=23.7.0",
  "mypy>=1.6.1",
  "ruff>=0.0.287",
  "types-click",
  "types-passlib",
  "types-python-jose",
  "types-pyyaml",
  "types-redis",
  "asyncpg-stubs",
  "pylint",
  "pylint-pydantic",
]
test = [
  "pytest>=7.4.1",
  "pytest-xdist>=3.3.1",
  "pytest-asyncio",
  "pytest-lazy-fixture>=0.6.3",
  "pytest-asyncio>=0.21.1",
  "pytest-mock>=3.11.1",
  "pytest-cov",
  "coverage",
  "time-machine>=2.12.0",
  "httpx>=0.24.1",
  "pytest-dotenv",
]

[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true
[tool.coverage.run]
branch = true
omit = ["tests/*", "**/*/migrations/**/*.py", "scripts/*"]

[tool.pytest.ini_options]
addopts = ["-ra", "--ignore", "migrations"]
asyncio_mode = "auto"
env_files = [".env.testing"]
env_override_existing_values = 1
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.*",
  "ignore::DeprecationWarning:passlib.*",
  "ignore::DeprecationWarning:aiosql.*",
]
testpaths = ["tests"]

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  '__pycache__',
  "*.zip",
  "*.tf",
  "./alembic/versions/*.py",
]
fix = true
ignore = [
  "E501", # pycodestyle line too long, handled by black
  "D100", # pydocstyle - missing docstring in public module
  "D101", # pydocstyle - missing docstring in public class
  "D102", # pydocstyle - missing docstring in public method
  "D103", # pydocstyle - missing docstring in public function
  "D104", # pydocstyle - missing docstring in public package
  "D105", # pydocstyle - missing docstring in magic method
  "D106", # pydocstyle - missing docstring in public nested class
  "D107", # pydocstyle - missing docstring in __init__
  "D202", # pydocstyle - no blank lines allowed after function docstring
  "D205", # pydocstyle - 1 blank line required between summary line and description
  "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
  "UP037", # pyupgrade - removes quotes from type annotation
  "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010", # flake8-bugbear - do not call setattr with a constant attribute value
  "B008", #  flake8-bugbear - Do not perform function call `Parameter` in argument defaultsRuff(B008)
  "RUF012", # ruff - mutable class attributes should be annotated with `typing.ClassVar`
  "ANN401", # ruff - Dynamically typed expressions (typing.Any) are disallowed
  "ANN102",
  "ANN101", # ruff - Missing type annotation for `self` in method
  "PLR0913", # ruff - Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "FBT001", # Boolean typed positional argument in function definition
  "FBT002", # Boolean default positional argument in function definition
  "FBT003", # Boolean Boolean default positional argument in function definition
  "ARG002", # Unused method argument
  "ARG001", #  Unused function argument
  "TD002",
  "TD003",
  "FIX002",
  "PGH003",
  "RUF006",
  "SLF001",
  "PT007",
  "S607",
  'PT004',
  'PT005',
  'S603',
  "E501", # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "ANN401",
  "ANN102",
  "ANN101",
  "TCH002",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "RET503",
  "PERF203", # ignore for now; investigate
  
]
unfixable = [  "F841","E711", ]
line-length = 120
select = ["ALL"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
src = ["src", "tests/"]
target-version = "py311"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
  "pydantic.field_validator",
  "sqlalchemy.ext.declarative.declared_attr",
  "sqlalchemy.orm.declared_attr.directive",
  "sqlalchemy.orm.declared_attr",
]


[tool.ruff.per-file-ignores]
"*/migrations/*.py" = ['D104', 'D103', 'D205', 'D212']
"__init__.py" = ['F401', 'D104']
"scripts/*.py" = ["INP001"]
"src/app/lib/db/migrations/versions/*.py" = ["ANN201", "INP001"]
"tests/*.py" = ['D103', 'S101', 'D104']


[tool.codespell]
ignore-words-list = "alog"
skip = 'pdm.lock, package-lock.json'

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
|^migrations/
)
'''
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = ["tests.*"]

[[tool.mypy.overrides]]
disallow_untyped_calls = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sqlalchemy.*", "saq.*", "uvicorn.*", "aiohttp.*", "jsbeautifier", "jsbeautifier.*", "re2.*", "uvloop", "uvloop.*"]

[[tool.mypy.overrides]]
ignore_errors = true
module = ["alembic.*"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pyright]
include = ["src", "infra"]
